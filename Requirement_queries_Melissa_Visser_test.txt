**Requirement 1.1.1**
	if(optie == 4):
	#Requirement 1.1.1
        c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_extension "
                  "LIKE '.doc' or file_extension like '.ppt' or file_extension like '.xls'")
        # commit
        connectie.commit()




**Requirement 1.1.2**
	if(optie==5):
        #Requirement 1.1.2
	c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_extension "
                  "LIKE '.txt' or file_extension like '.doc'")
        # commit
        connectie.commit()




**Requirement 1.1.3**
	if(optie == 6):
        #Requirement 1.1.3
        c.execute("select file_name, file_extract_name, file_extension, file_creation_time, file_modification_time, file_acces_time "
                  "from Files "
                  "where file_extension "
                  "LIKE '.pdf' or file_extension like '.doc' or file_extension like '.jpg' or file_extension like '.png'")
        # commit
        connectie.commit()




**Requirement 1.1.4**
	if(optie == 7):
        #Requirement 1.1.4
	c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_extension "
                  "LIKE '.txt' or file_extension like '.doc'")
        # commit
        connectie.commit()




**Requirement 1.1.5**
	if(optie == 8):
        #Requirement 1.1.5
	c.execute("select file_name, file_extract_name, file_extension, file_creation_time, file_modification_time, file_acces_time "
                  "from Files "
                  "where file_extension "
                  "LIKE '.txt' or file_extension like '.doc'")
        # commit
        connectie.commit()




**Requirement 1.1.6**
	if(optie == 9):
	#Requirement 1.1.6
	#Tabel tabelDuplicates aanmaken met de volgende kolommen: file_name, file_md5_hash en file_aantal_duplicates
		sql_command = """CREATE TABLE tabelDuplicates AS
		SELECT file_name as 'file_name',
		file_md5_hash as 'file_md5_hash',
		count(*) as 'file_aantal_duplicates'
		FROM Files
		GROUP BY file_md5_hash HAVING count(*) > 1
		ORDER BY file_name DESC """

		# Voer code uit
		c.execute(sql_command)
		# commit
		connectie.commit()




**Requirement 1.1.7**
	if(optie == 10):
        #Requirement 1.1.7
        c.execute("select file_name, file_extract_name, file_extension, file_md5_hash, file_creation_time, file_modification_time, file_acces_time "
        	  "from Files "
        	  "where file_extension "
        	  "LIKE '.jpg' or file_extension like '.jpeg' or file_extension like '.png' or file_extension like '.tiff'")
        # commit
        connectie.commit()




**Requirement 1.1.8**
	#if(optie == 11):
        #Requirement 1.1.8




**Requirement 1.1.9**
	#if(optie == 12):
        #Requirement 1.1.9
	c.execute("select file_name, file_extract_name, file_extension, file_creation_time, file_modification_time, file_acces_time "
                  "from Files "
                  "where file_extension "
                  "LIKE '.pdf' or file_extension like '.tif' or file_extension like '.tiff'")
        # commit
        connectie.commit()




**Requirement 1.1.10**
	if(optie == 13):
        #Requirement 1.1.10
        c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_name "
                  "LIKE '%Bookmark%' or file_name like '%History%' or file_name like '%Facebook%' or file_name like '%Twitter%' or file_name like '%Skype%'")
        # commit
        connectie.commit()




**Requirement 1.1.11**
	if(optie == 14):
        #Requirement 1.1.11
        c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_name "
                  "LIKE '%Crypt%' or file_name like '%Lock%' or file_name like '%Safe%'")
        # commit
        connectie.commit()




**Requirement 1.1.12**
	if(optie == 15):
        #Requirement 1.1.12
        c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_name "
                  "LIKE '%VPN%' or file_name like '%Citrix%'")
        # commit
        connectie.commit()




**Requirement 1.1.13**
	#if(optie == 16):
        #Requirement 1.1.13




**Requirement 1.1.14**
	# if(optie == 17):
        # Requirement 1.1.14
	



**Requirement 1.1.15**
	# if(optie == 18):
        # Requirement 1.1.15




**Requirement 1.1.16**
	if(optie == 19):
        #Requirement 1.1.16
        c.execute("select file_name, file_extension "
                  "from Files "
                  "where file_name "
                  "LIKE '%Confidential%' or file_name like '%Vertrouwelijk%' or file_name like '%Porn%' or file_name like '%Abuse%' or file_name like '%Misbruik%' or file_name like '%Mishandeling%' or file_name like '%Fraud%'")
        # commit
        connectie.commit()




**Requirement 1.1.17**
	if(optie == 20):
        #Requirement 1.1.17




**Requirement 1.1.18**
	if(optie == 21):
        #Requirement 1.1.18




**Logfunctie C.2**

#LIBRARIES
import tkFileDialog as filedialog
import sys
import sqlite3
from random import randint
import time
import datetime
import os
import pytsk3
import binascii
#import pyewf
import logging

# create logger
logger = logging.getLogger("Logging")
logger.setLevel(logging.DEBUG)

# add filehandler to logger
fh = logging.FileHandler(r'C:\Users\visse\Desktop\test_30062017.log')
fh.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# create formatter
formatter = logging.Formatter('%(asctime)s %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(fh)
logger.addHandler(ch)

#VARIABELEN
d = datetime.datetime.now()
datum = "%s/%s/%s" %(d.day, d.month, d.year)
tijd = time.strftime("%X")
werkMap = "BMMG_Werkmap"

saveFileMap = "/savefile/"
extractsMap = "/extracts/"

#SQL
kolomCasusNaam = 'casus_naam'
kolomOnderzoekerNaam = 'onderzoeker_naam'
kolomCasusMap = 'locatie_casusmap'

tabelImageBestand = "ImageBestand"
kolomImageNaam = "image_naam"
kolomImageLocatie = "image_locatie"


#kolomDataBLOB = 'data_blob'
#intDataType = 'INTEGER'
#floatDataType = 'REAL'
#nullDataType = 'NULL'
textDataType = 'TEXT'
#dataBlob = 'BLOB'

#FUNCTIE nieuwe casus
def nieuweCasusToevoegen():
    print("\nEen nieuwe casus toevoegen")

    #casusnaam invoeren - foutafvanging moet nog
    casusNaam = raw_input(str("Geef Casus Naam (geen cijfer als eerste karakter): "))
    if not casusNaam:
        casusNaam = ("BMMG_Casus_" + str(randint(0,99999999)))
        print("Casus Naam: " + casusNaam)
    casusNaam = casusNaam.replace(" ", "_")

    #onderzoekernaam invoeren
    onderzoekerNaam = str(raw_input("Onderzoeker Naam: "))
    if not onderzoekerNaam:
        onderzoekerNaam = "Unknown"
        print("Onderzoeker Naam: "+onderzoekerNaam+"\n")

    #opslaglocatie laten kiezen
    opslagLocatie = filedialog.askdirectory(title='Geef aan in welke map u de casusbestanden wilt opslaan.'
                                                  '\nIn deze map worden de savefile en extracties opgeslagen')
    if not opslagLocatie:
        try:
            opslagLocatie = filedialog.askdirectory(title='Geef aan in welke map u de casusbestanden wilt opslaan.'
                                                          '\nIn deze map worden de savefile en extracties opgeslagen\n'
                                                          'Kies nu een map, anders wordt het programma afgesloten!')
        except:
            print("Twee keer geen opslaglocatie gekozen, het programma wordt afgesloten")
            time.sleep(5)
            sys.exit()

    ###mappen aanmaken
    #werkmap aanmaken in de opslaglocatie
    werkMapLocatie = (opslagLocatie+"/"+werkMap)
    if not os.path.exists(werkMapLocatie):
        os.makedirs(werkMapLocatie)
    #casusmap aanmaken in de werkmap
    casusMap = werkMapLocatie + "/" + casusNaam
    if not os.path.exists(casusMap):
        os.makedirs(casusMap)
    #savefilemap aanmaken in casusmap
    if not os.path.exists(casusMap + saveFileMap):
        os.makedirs(casusMap + saveFileMap)

    databaseBestandNaam = casusNaam + ".BMMG"

    #databasebestand maken in de savefilemap van de casusmap
    databaseBestand = casusMap + saveFileMap + databaseBestandNaam

    #connectie maken naar SQLite database
    connectie = sqlite3.connect(databaseBestand)

    #cursor object aanmaken
    c = connectie.cursor()

    #casusNaamInfo variable maken voor de database
    casusNaamInfo = casusNaam +"_info"

    #nieuwe tabel maken met casusnaam kolom
    c.execute('CREATE TABLE {tabelnaam} ({kolomnaam} {datatype})'.format(tabelnaam=casusNaamInfo,
                                                                         kolomnaam=kolomCasusNaam, datatype=textDataType))

    #niewe kolommen toevoegen
    c.execute("ALTER TABLE {tabelnaam} ADD COLUMN '{kolomnaam}' {datatype}"
              .format(tabelnaam=casusNaamInfo, kolomnaam=kolomOnderzoekerNaam, datatype=textDataType))
    c.execute("ALTER TABLE {tabelnaam} ADD COLUMN '{kolomnaam}' {datatype}"
              .format(tabelnaam=casusNaamInfo, kolomnaam=kolomCasusMap, datatype=textDataType))

    #database vullen
    c.execute("INSERT INTO {tabelnaam} ({kolomnaam1}, {kolomnaam2}, {kolomnaam3}) VALUES ('{value1}', '{value2}', '{value3}')"
              .format(tabelnaam=casusNaamInfo, kolomnaam1=kolomCasusNaam, kolomnaam2=kolomOnderzoekerNaam,
                      kolomnaam3=kolomCasusMap, value1=casusNaam, value2=onderzoekerNaam, value3=casusMap))

    #commit
    connectie.commit()

    if onderzoekerNaam == "Unknown":
        logger.info("Welkom! De casus is aangemaakt.\n"
              "De savefile: '" + databaseBestandNaam + "' is aangemaakt.\n"
                                             "De savefile is te vinden in de map: "+casusMap+saveFileMap+"\n"
                                                                                             "Met behulp van de savefile kunt u verdergaan met de casus wanneer u wilt.\n")
    else:
        logger.info("Welkom " + onderzoekerNaam + "! De casus is aangemaakt.\n"
                                            "De savefile: '" + databaseBestandNaam + "' is aangemaakt.\n"
                                                                           "De savefile is te vinden in de map: "+casusMap+saveFileMap+"\n"
                                                                           "Met behulp van de savefile kunt u verdergaan met de casus wanneer u wilt.\n")

    #imagebestand openen
    print("Geef image-bestand op:")
    #imageBestand = filedialog.askopenfilename(filetypes=[(".img, .raw, .E01, etc.."), ["*.img","*.raw","*.E01","*.e01","*.dd"]], title='Geef image-bestand op:')
    imageBestand = filedialog.askopenfilename(initialdir = "/",title = "Geef image-bestand op:",filetypes = (("E01","*.E01"),("all files","*.*")))
    if not imageBestand:
        try:
            imageBestand = filedialog.askopenfilename(initialdir = "/",title = "Geef image-bestand op:",filetypes = (("E01","*.E01"),("all files","*.*")))
        except:
            print("Twee keer geen image-bestand geselecteerd, het programma wordt afgesloten")
            time.sleep(5)
            sys.exit()
    #imageName genereren
    imageName1 = os.path.splitext(os.path.basename(imageBestand))[0]
    extensie = os.path.splitext(imageBestand)[1]
    imageName = imageName1 + extensie
    logger.info("\n"+imageName + " is toegevoegd aan de casus.")

    #ImageBestand tabel maken
    c.execute('CREATE TABLE {tabelnaam} ({kolomnaam} {datatype})'.format(tabelnaam=tabelImageBestand,
                                                                         kolomnaam=kolomImageNaam, datatype=textDataType))

    #ImageBestand kolom toevoegen
    c.execute("ALTER TABLE {tabelnaam} ADD COLUMN '{kolomnaam}' {datatype}"
              .format(tabelnaam=tabelImageBestand, kolomnaam=kolomImageLocatie, datatype=textDataType))

    #ImageBestand tabel vullen
    c.execute("INSERT INTO {tabelnaam} ({kolomnaam1},{kolomnaam2}) VALUES ('{value1}','{value2}')"
              .format(tabelnaam=tabelImageBestand, kolomnaam1=kolomImageNaam, kolomnaam2=kolomImageLocatie, value1=imageName, value2=imageBestand))
    #commit
    connectie.commit()

    #Naar werkMenu()
    werkMenu(casusNaam, connectie, c, imageBestand)

#FUNCTIE bestaande casus
def bestaandeCasusOpenen():
    print("\nOpen een bestaande casus")

    #databasebestand
    #databaseBestand = filedialog.askopenfilename(filetypes=[(".BMMG", ["*.BMMG"],)], title='Open een bestaande casus:')
    databaseBestand = filedialog.askopenfilename(initialdir = "/",title = "Open een bestaande casus:",filetypes = (("BMMG-File","*.BMMG"),))

    if not databaseBestand:
        try:
            databaseBestand = filedialog.askopenfilename(initialdir = "/",title = "Open een bestaande casus:",filetypes = (("BMMG-File","*.BMMG"),))
        except:
            print("Twee keer geen savefile opgegeven, het programma wordt afgesloten")
            time.sleep(5)
            sys.exit()

    #bestandsextensie verwijderen van de bestandsnaam om zo casusnaaminfo te maken die nodig is in de database
    casusNaam = os.path.basename(databaseBestand[:-5])
    casusNaamInfo = casusNaam +"_info"

    #connectie maken naar SQLite database
    connectie = sqlite3.connect(databaseBestand)

    #cursor object aanmaken
    c = connectie.cursor()

    #data opvragen uit de database en printen op scherm
    c.execute('SELECT * FROM {tabelnaam}'. \
              format(tabelnaam=casusNaamInfo))
    dataUitDB = c.fetchone()[0]
    logger.info("\nDe casus: '"+ dataUitDB + "' is geopend.")

    #imagebestandlocatie opvragen uit database
    c.execute('SELECT image_locatie FROM ImageBestand')
    imageBestand = c.fetchone()[0]

    #commit
    connectie.commit()

    #Naar het werkmenu
    werkMenu(casusNaam, connectie, c, imageBestand)


def extractor(casusNaam, connectie, c, imageBestand, extractsLocatie):
    casusNaam = casusNaam
    connectie = connectie
    c = c

    class EwfImgInfo(pytsk3.Img_Info):
        def __init__(self, ewf_handle):
                self._ewf_handle = ewf_handle
                super(EwfImgInfo, self).__init__(url="", type=pytsk3.TSK_IMG_TYPE_EXTERNAL)

    #imagebestand
    imageFile = imageBestand
    #image handle
    image = pytsk3.Img_Info(imageFile)

    #Loop door een mapje
    def checkDirectory(handle):

        for file in handle:

            if file.info.name.name in [".", ".."]:
                continue
            else:
                try:
                    ftype = file.info.meta.type
                    #Als er een mapje is gevonden
                    if ftype == pytsk3.TSK_FS_META_TYPE_DIR:
                        print("Map gevonden")
                        #print directory naam
                        #print file.info.name.name
                        #geef directory naam mee aan functie om te doorzoeken
                        checkDirectory(file.as_directory())

                    #Als er een bestand is gevonden
                    else:
                        #lees eerste 16 bytes van de file (header bytes)
                        header_bytes = file.read_random(0, 16)
                        #maak hexwaarde hoofdletters
                        hexwaarde = binascii.hexlify(header_bytes).upper()

                        #ENUMERATION van File Signatures

                        exehex = '4D5A'                         #executables, DLL's, MUI's
                        pdfhex = '25504446'                     #PDF
                        jpeghex = 'FFD8FFDB'                    #JPEG
                        jpeghex1 = 'FFD8FFE0'                   #JPEG
                        jpeghex2 = 'FFD8FFE1'                   #JPEG
                        pnghex1 = '89504E470D0A1A0A'            #PNG
                        tifhex = '49492A00'                     #TIF
                        tiffhex = '4D4D002A'                    #TIFF
                        compoundhex = 'D0CF11E0A1B11AE1'        #Compound Files(DOC,XLS,PPT,MSG and other)
                        txthex = '464F524D'                     #TXT
                        rarhex = '526172211A0700'               #RAR
                        rarhex2 = '526172211A070100'            #RAR
                        vmdkhex = '4B444D'                      #VMDK
                        sevenziphex = '377ABCAF271C'            #7Zip

                        #zip file format and formats based on it
                        #zip, jar, odt, ods, odp, docx, xlsx, pptx, vsdx, apk
                        ziphex1 = '504B0304'
                        ziphex2 = '504B0506'
                        ziphex3 = '504B0708'

                        def extract(filename):
                            bestandLocatie = extractsLocatie + filename
                            bestand = open(bestandLocatie, 'w')
                            bestand.write(file.read_random(0, file.info.meta.size))
                            bestand.close()
                            logger.info(filename+" extracted")

                        #kijk of hexwaarde in fileheader voorkomt
                        if exehex in hexwaarde:
                            #print file.info.name.name + ' = een executable'
                            filename = file.info.name.name
                            extract(filename)

                        if pdfhex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if jpeghex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if jpeghex1 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if jpeghex2 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if pnghex1 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if tiffhex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if tifhex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if compoundhex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if txthex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if rarhex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if rarhex2 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if vmdkhex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if sevenziphex in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if ziphex1 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if ziphex2 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                        if ziphex3 in hexwaarde:
                            filename = file.info.name.name
                            extract(filename)

                except:
                    print("")


    #Partitie tabel ophalen met behulp van de handle
    partitionTable = pytsk3.Volume_Info(image)
    #blocksize ophalen
    bsize = partitionTable.info.block_size

    #directory checker
    for part in partitionTable:
        print(part)
        try:
            partitionHandle = pytsk3.FS_Info(image, offset=(part.start * bsize))
            directoryHandle = partitionHandle.open_dir(path='/')
            checkDirectory(directoryHandle)
        except IOError as error:
            print("")

def werkMenu(casusNaam, connectie, c, imageBestand):

    print("\nWerkmenu:\n")

    #casusnaaminfo maken voor de database
    casusNaamInfo = casusNaam+"_info"

    #locatie casusmap opvragen uit database
    c.execute('SELECT locatie_casusmap FROM {tabelnaam}'. \
              format(tabelnaam=casusNaamInfo))
    locatieCasusMap = c.fetchone()[0]

    #werkmap aanmaken in de opslaglocatie
    extractsLocatie = (locatieCasusMap+extractsMap)
    if not os.path.exists(extractsLocatie):
        os.makedirs(extractsLocatie)

    #Werkmenu opties
    print("Optie 1: Casusnaam opvragen")
    print("Optie 2: Files extraheren")
    print("Optie 3: BMMG-Analyzer afsluiten")

    #optie kiezen
    optie = int(raw_input("\nKies een optie: "))
    if not optie:
        try:
            optie = int(raw_input("\nKies een optie. Vul een cijfer in!!!: "))
        except ValueError:
            sys.exit("Twee keer geen optie opgegeven, het programma wordt afgesloten")



    if(optie == 1):
    #casusnaam opvragen uit de database en printen op scherm
        c.execute('SELECT casus_naam FROM {tabelnaam}'. \
              format(tabelnaam=casusNaamInfo))
        dataUitDB = c.fetchone()
        logger.info("\nCasus Naam: "+(dataUitDB[0]))

        #weer naar werkmenu
        werkMenu(casusNaam, connectie, c, imageBestand)

    if(optie == 2):

        extractor(casusNaam, connectie, c, imageBestand, extractsLocatie)

    if(optie == 3):
        logger.info("Het programma wordt over 3 seconden afgesloten...")
        connectie.close()
        time.sleep(3)
        sys.exit()

#MAIN CODE
print(
" ____   __  __  __  __   _____                                _                        \n"
"|  _ \ |  \/  ||  \/  | / ____|          /\                  | |                       \n"
"| |_) || \  / || \  / || |  __  ______  /  \    _ __    __ _ | | _   _  ____ ___  _ __ \n"
"|  _ < | |\/| || |\/| || | |_ ||______|/ /\ \  | '_ \  / _` || || | | ||_  // _ \| '__|\n"
"| |_) || |  | || |  | || |__| |       / ____ \ | | | || (_| || || |_| | / /|  __/| |   \n"
"|____/ |_|  |_||_|  |_| \_____|      /_/    \_\|_| |_| \__,_||_| \__, |/___|\___||_|   \n"
"                                                                  __/ |                \n"
"                                                                 |___/ "+datum+" "+tijd+" \n"
"===========================================================================================\n"
)

print("Goedendag, wat wilt u doen? \n")
print ("Optie 1: Een nieuwe casus toevoegen")
print("Optie 2: Ga verder met een bestaande casus \n")

#optie kiezen
optie = int(raw_input("Kies een optie: "))
if not optie:
    try:
        optie = int(raw_input("Kies een optie. Vul een cijfer in!!! "))
    except:
        print("Twee keer geen optie opgegeven, het programma wordt afgesloten.")
        time.sleep(5)
        sys.exit()

#doorsturen naar gekozen optie
if(optie == 1):
    nieuweCasusToevoegen()

elif(optie == 2):
    bestaandeCasusOpenen()








**Ook op map zoeken ipv alleen file_name?**




















**filename**
	c.execute("SELECT {kolomnaam} FROM {tabelnaam}".format(kolomnaam= kolomFileName, tabelnaam= tabelFiles))

**opslagplaats**
	c.execute("SELECT {kolomnaam} FROM {tabelnaam}".format(kolomnaam= kolomFileExtractNameLocation, tabelnaam= tabelFiles))

**hashwaardes**
	c.execute("SELECT {kolomnaam} FROM {tabelnaam}".format(kolomnaam= file_md5_hash, tabelnaam= tabelFiles))

**filenames met bepaalde extensies**
	c.execute("SELECT {kolomnaam} {kolomnaam1} FROM {tabelnaam}".format(kolomnaam= file_name, kolomnaam1= file_extension, tabelnaam= tabelFiles))

**duplicates - filenames met zelfde hashwaarde**
	if(optie == 4):
			#Tabel tabelDuplicates aanmaken met de volgende kolommen: file_name, file_md5_hash en file_aantal_duplicates
			sql_command = """CREATE TABLE tabelDuplicates AS
			SELECT file_name as 'file_name',
			file_md5_hash as 'file_md5_hash',
			count(*) as 'file_aantal_duplicates'
			FROM Files
			GROUP BY file_md5_hash HAVING count(*) > 1
			ORDER BY file_name DESC """

			c.execute(sql_command)

			# commit
			connectie.commit()
			







**	Maak query voor keyword search: Select file_name from files where ... is like **
	

**	Maak query om bijvoorbeeld alleen de extensie .jpg te zoeken **
	Select ... where extensie is like .exe